# main_controller.py
import threading
import time
import requests
from Lane_Model import HeadlessLaneTracker
from Traffic_Signs import TrafficSignDetector
from Driver_State import DriverStateDetector

class AutonomousController:
    def __init__(self, config):
        self.config = config
        self.running = False
        self.last_packet = {}
        
        # Initialize models
        self.lane_tracker = HeadlessLaneTracker(config['lane_stream'])
        self.sign_detector = TrafficSignDetector(
            config['sign_stream'], 
            config['sign_model_path']
        )
        self.driver_monitor = DriverStateDetector(
            video_source=config['driver_cam_index']
        )

    def start(self):
        """Start all processing threads"""
        self.running = True
        
        # Start model threads
        self.lane_tracker.start()
        self.sign_detector.start()
        self.driver_monitor.start()
        
        # Start data transmission thread
        self.transmit_thread = threading.Thread(target=self._transmit_loop)
        self.transmit_thread.start()

    def _create_packet(self):
        """Collect data from all models and package it"""
        return {
            'lanes': self.lane_tracker.get_positions(),
            'signs': self.sign_detector.get_signs(),
            'driver': self.driver_monitor.get_state(),
            'ts': time.time()
        }

    def _send_packet(self, packet):
        """Send data to ESP32 with error handling"""
        try:
            response = requests.post(
                self.config['esp32_endpoint'],
                json=packet,
                timeout=0.3
            )
            return response.status_code == 200
        except Exception as e:
            print(f"Transmission error: {str(e)}")
            return False

    def _transmit_loop(self):
        """Main control loop running in separate thread"""
        while self.running:
            start_time = time.time()
            
            # Create and send data packet
            packet = self._create_packet()
            if self._send_packet(packet):
                self.last_packet = packet
                
            # Maintain 10Hz update rate
            elapsed = time.time() - start_time
            if elapsed < 0.1:
                time.sleep(0.1 - elapsed)

    def stop(self):
        """Stop all components gracefully"""
        self.running = False
        self.lane_tracker.stop()
        self.sign_detector.stop()
        self.driver_monitor.stop()
        self.transmit_thread.join()

if __name__ == "__main__":
    config = {
        'lane_stream': 'http://192.168.4.1/stream',
        'sign_stream': 'http://192.168.4.2/stream',
        'sign_model_path': 'best2.pt',
        'driver_cam_index': 0,
        'esp32_endpoint': 'http://192.168.4.1/control'
    }

    controller = AutonomousController(config)
    
    try:
        print("Starting autonomous system...")
        controller.start()
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nShutting down...")
        controller.stop()
        print("System stopped safely")